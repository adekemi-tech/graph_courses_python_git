## Imports


```{python}
import pandas as pd
import plotly.express as px
```


```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)

# Fuels Wide dataset
fuels_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_per_capita_wide.csv"
)

# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/euro_births_wide.csv"
)

# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)

# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```

## What do Wide and Long mean

**Wide Format:**

Product	Jan	Feb	Mar
A	100	120	110
B	90	95	100
C	80	85	90

**Long Format:**
Product	Month	Sales
A	Jan	100
A	Feb	120
A	Mar	110
B	Jan	90
B	Feb	95
B	Mar	100
C	Jan	80
C	Feb	85
C	Mar	90

## Practice Q: Wide or Long?
Consider the temperatures dataset created earlier:

```{python}
temperatures
```
Is this data in a wide or long format? It is in a wide format

## When Should You Use Wide vs. Long Data?

The truth is, it really depends on what you want to do! The wide format is great for displaying data because it’s easy to visually compare values this way. Long data is best for some data analysis tasks, like grouping and plotting.

## From Wide to Long with 'melt()'

```{python}
fuels_wide
```

```{python}
fuels_wide.melt(id_vars=["Entity", "Code"]).sort_values(["Entity", "variable"])

```

```{python}
fuels_long = fuels_wide.melt(id_vars=["Entity", "Code"], var_name="year", value_name="oil_consumption").sort_values(["Entity", "year"])
fuels_long
```

```{python}
fuels_long['year'] = fuels_long['year'].str.replace('y_', '').astype(int)
fuels_long
```

## Practice Q: Temperatures to Long
Convert the temperatures dataset shown below into a long format. Your answer should have the following column names: “country”, “year”, and “avg_temp”.

```{python}
temperatures
```


```{python}
temperatures_long = pd.melt(
    temperatures,
    id_vars=["country"],
    var_name="year",
    value_name="avg_temp"
)
temperatures_long
```
## Practice Q: Eurostat Births to Long
For this practice question, you will use the euro_births_wide dataset from Eurostat. It shows the annual number of births in 50 European countries:

```{python}
euro_births_wide.head()
```

The data is in a wide format. Convert it to a long format DataFrame that has the following column names: “country”, “year”, and “births_count”.

Remove the x prefix from the year columns and convert them to integers.

```{python}

# Convert wide to long format
euro_births_long = pd.melt(
    euro_births_wide,
    id_vars=["country"],
    var_name="year",
    value_name="births_count"
)

# Remove the 'x' prefix from the year column and convert to integer
euro_births_long['year'] = euro_births_long['year'].str.replace('x', '').astype(int)

# Display the result
print(euro_births_long.head())

```
## Using Long Data for Analysis

Let’s see why long data is often better for analysis.

Consider again the fuels_wide dataset:

```{python}
fuels_wide.head()
```

```{python}
fuels_long.head()
```
Long data easy to extract statistics:
If we want to find the average fossil fuel consumption per country, this is very easy to do with the long format:
```{python}
fuels_long.groupby('Entity')['oil_consumption'].mean()
```

Wide data not so much easy
```{python}
fuels_wide[['y_1970', 'y_1980', 'y_1990', 'y_2000', 'y_2010', 'y_2020']].mean(axis=1)
```

Long data is also very useful for plotting.

For example, to plot the average fossil fuel consumption per country over time, we can use the following code:

```{python}
subset = fuels_long.query('Entity in ["Peru", "Iran", "China"]')

```

```{python}
px.line(subset, x='year', y='oil_consumption', color='Entity', title='Average Fossil Fuel Consumption per Country')
```

##  From Long to Wide with pivot()

```{python}
contracts
```

```{python}
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index()
contracts_summary
```

Now, let’s see how to convert such long data into a wide format with pivot().
```{python}
contracts_wide = contracts_summary.pivot(
    index="state", columns="year", values="count"
).reset_index()
contracts_wide.head()
```

## Practice Q: Temperatures back to Wide
Convert the long temperatures_long dataset you created above back to a wide format. Your answer should have the following column names: “country”, “1994”, “1995”, and “1996”.

```{python}

# Pivot the long dataset to wide format
temperatures_wide = temperatures_long.pivot(index='country', columns='year', values='avg_temp').reset_index()

# Remove the columns name attribute and rename columns if necessary
temperatures_wide.columns.name = None
temperatures_wide.columns = ['country', '1994', '1995', '1996']

print(temperatures_wide.head())

```

## Practice Q: Population to Wide
The population dataset shows the populations of 219 countries over time.

Reshape this data into a wide format.

```{python}
population_wide = population.pivot(index='country', columns='year', values='population').reset_index()
population_wide.columns.name = None
print(population_wide.head())

```