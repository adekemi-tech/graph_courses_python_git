---
title: "Pandas, Query Rows"
author: "Adekemi Asaolu"
format:
    html: 
        embed-resources: true
execute:
    echo: false
---
# Imports


```{python}
import pandas as pd
```
# Dataset

```{python}
yaounde = pd.read_csv(".venv\data\yaounde_data.csv")
```

```{python}
yao = yaounde[["age", "sex", "weight_kg", "neighborhood","occupation","symptoms", "is_smoker", "is_pregnant", "igg_result", "igm_result"]]
yao
```

# Introduce query
```{python}
yao.query("sex == 'Male'")
```

```{python}
yao.query("sex == 'Male'").shape # to access the number of values that fulfill the query
```

```{python}
# Get the number of rows that fulfill the criterion
yao.query("sex == 'Male'").shape [0]
```

```{python}
# queries do not modify the dataframe itself

yao.query("sex == 'Male'")
yao
```

```{python}
# To modify the dataframe, you need to create a new object/variable
yao_male = yao.query("sex == 'Male'")
yao_male
```

# Practice Q: Subset for pregnant respondents
Pregnant individuals have the is_pregnant column set to "Yes". Subset just these individuals and store the result in a new dataframe called yao_pregnant


```{python}
yao_pregnant = yao.query("is_pregnant == 'Yes'")
yao_pregnant
```

```{python}
yao_pregnant = yao.query("is_pregnant == 'Yes'").shape [0]
yao_pregnant
```

# Relational Operators
```{python}
yao.query("sex == 'Male'") # Equal to
yao.query("sex != 'Male'") # Not equal to
yao.query("age > 7") # greater than
yao.query("age >= 7") # greater than or equal to
yao.query("age < 7") # less than
yao.query("age < 7"). shape [0] # to show the number of rows
yao.query("age <= 7") # less than or equal to
#isin
yao.query("neighborhood.isin(['Briqueterie', 'Carriere'])")
```
# Practice Q: Relation Operations
From yao, keep only respondents who were children (under 18). Assign the result to a new DataFrame called yao_children. There should be 291 rows.

With isin(), keep only respondents who live in the "Carriere" or "Ekoudou" neighborhoods. Assign the result to a new DataFrame called yao_carriere_ekoudou. There should be 426 rows


```{python}
yao.query("age < 18"). shape[0]
```

```{python}
yao_carriere_ekoudou = yao.query("neighborhood.isin(['Carriere', 'Ekoudou'])")
yao_carriere_ekoudou
```
# Accessing external variables

```{python}
min_age = 25
yao.query("age >= @min_age")
```

# Practice Q: Subset for young respondents
From yao, keep respondents who are less than or equal to the variable max_age, defined below. Assign the result to a new DataFrame called yao_young. There should be 590 rows.

```{python}
max_age = 30
yao_young = yao.query("age <= @max_age")
yao_young
```

# Combining Conditions
```{python}
# age less than 18 or age greater than 65
yao.query("age < 18 | age> 65")
```


```{python}
## Either pregnant or ex_smokers
yao.query('is_pregnant == "Yes" | is_smoker == "Ex_smoker"')
```


```{python}
## Pregnant And an ex_smokers
yao.query('is_pregnant == "Yes" & is_smoker == "Ex_smoker"')
```

```{python}
# Get unique values in columns
yao.is_smoker.value_counts()
```

# Practice Q: Subset for IGG positive men

Subset yao to only keep men who tested Igg positive. Assign the result to a new DataFrame called yao_igg_positive_men. There should be 148 rows after your query. think carefully whether to use & or|.

```{python}
yao.columns
```

```{python}
yao_igg_positive_men = yao[(yao["sex"] == "Male") & (yao["igg_result"] == "Positive")]

yao_igg_positive_men. shape[0]
```
# Negating Conditions with the ~ operator

```{python}
# return individuals who do not fulfill the condition
yao.query(" ~ (occupation == 'Student')")
```

```{python}
# equivalent to:
yao.query("occupation !='Student'")
```



```{python}
yao.query(" ~ (age<18 | weight_kg < 30)")
```

# Practice Q: Drop Smokers and drop those above 50

we want to avoid giving a drug to older individuals and smokers. From yao, drop respondents that are either above 50 or who are smokers. Use the ~ to negate the conditions. Assign the result to a new DataFrame called yao_dropped. Your output should have 810 rows.


```{python}
yao_dropped = yao[~((yao["age"] > 50) | (yao["is_smoker"] == "Smoker"))]

print(yao_dropped.shape[0])
```

# NaN values

```{python}
# yao.query ("is_pregnant == 'Nan'")
# this does not work
```

```{python}
yao.query("is_pregnant.isna()")
```


```{python}
yao.query("is_pregnant.notna()")
```
# Practice Q: Keep Missing Smoking Status

From the yao dataset, keep all the respondents who had NA records for the report of their smoking status.


```{python}
yao.query("is_smoker.isna()")
```

# Querying based on String Patterns

```{python}
yao.occupation.value_counts()
```


```{python}
# Values containing the string Student
yao.query("occupation.str.contains('Student')")
```


```{python}
# Values not containing the string Student
yao.query(" ~ (occupation.str.contains('Student'))")
```

```{python}
# Contains Student or Farmer
yao.query("occupation.str.contains('Student|Farmer')")
```

# Practice Q: Symptoms

Query yao to find respondents who reported "Cough" or "Fever" as symptoms. Your answer should have 219 rows.

```{python}

yao.query("symptoms.str.contains('Cough|Fever')")

```