---
title: "Pandas, Subset Columns"
author: "Adekemi Asaolu"
format:
    html: 
        embed-resources: true
execute:
    echo: false
---

# Subsetting Columns

# Imports

```{python}
import pandas as pd
```

# Dataset

```{python}
yao = pd.read_csv(".venv\data\yaounde_data.csv")
yao
```

## Selecting columns with square brackets

```{python}
yao[["age", "sex"]]
```


```{python}
# this code does not work
# yao["age", "sex"]
```

```{python}
yao["age"]
```

```{python}
yao[["age"]]
```

## Storing data Subsets

```{python}
yao_subset = yao[["age", "sex"]]
```

```{python}
yao_subset
```

```{python}
yao_subset =yao_subset[["age"]]
yao_subset
```

## Practice Q: Select columns with []
Use the []operators to select the weight_kg and height_cm variables in the yao dataframe. Assign the result to a new dataframe called yao_weight_height.


```{python}
yao_weight_height = yao[["weight_kg", "height_cm"]]
yao_weight_height
```

## Excluding columns with drop()
```{python}
yao.drop(columns=["age"])
```

```{python}
yao.drop(columns=["age", "age_category"])
```

# Practice Q: Drop columns with drop()
From the yao dataframe, remove the columns highest_education and consultation.

Assign the result to a new dataframe yao_no_education_consultation.

Print that new dataframe
```{python}
yao.drop(columns=["highest_education", "consultation"])
```

```{python}
yao_no_education_consultation = yao.drop(columns=["highest_education", "consultation"])
```

## Using filter to select columns by regex
Regex: Regular Expressions
```{python}
yao.filter(regex="ig")
```

```{python}
yao.filter(regex="^ig") # starts with ig
```

```{python}
yao.filter(regex="result$") # ends with result
```

```{python}
yao.filter(regex=".*result$") # ends with result. Chatgpt code
```

## Practice Q: Select columns with regex

Select all the columns in the yao dataframe that starts with "is_". Assign the result to a new dataframe called yao_is_columns.

```{python}
yao_is_columns=yao.filter(regex="^is_")
yao_is_columns
```

## Changing Column names with renames

```{python}
yao.rename(columns={"age": "patient_age", "sex": "patient_sex"})
```

## Practice Q: Rename columns with rename()
Rename the age_category column in the yao dataframe to age_cat. Assign the result to a new dataframe called yao_age_cat.

```{python}
yao_age_cat = yao.rename(columns={"age": "age_cat"})
yao_age_cat
```

## Cleaning messy column names

```{python}
test_df = pd.DataFrame(
    {"good_name": range(3),
    "bad name": range(3),
    "bad*@name*2": range(3)}
)
test_df
```

```{python}
test_df.good_name
```
```{python}
# bad names are not accessible through dot syntax
# test_df.bad name
```


```{python}
test_df.columns.str.replace(r"[^a-zA-Z0-9]", "_", regex=True)
```

```{python}
test_df.columns = test_df.columns.str.replace(r"[^a-zA-Z0-9]", "_", regex=True)
test_df
```

## Practice Q: Clean column names with regex
Consider the dataframe defined below. Use the str. replace method to clean the column names.

```{python}
cleaning_practice = pd.DataFrame(
    {"Aloha": range(3), "bell Chart": range(3), 
    "Animals@thezoo": range(3)}
)
cleaning_practice
```

```{python}
cleaning_practice.columns.str.replace(r"[^a-zA-Z0-9]", "_", regex=True)
cleaning_practice
```