## Workshop 7: Using LLMs for Classification Tasks

### Introduction

In this week’s workshop, you’ll learn how to use Large Language Models (LLMs) for **classification tasks**. We’ll start with an example using epidemiology paper abstracts from medRxiv. Then, you’ll analyze job posting data from Glassdoor to extract structured information.

## Imports 

Run the chunk below to import the necessary packages, set your OpenAI API key, and initialize the OpenAI client.

```{python}
from openai import OpenAI
import pandas as pd
import numpy as np
import plotly.express as px
from collections import Counter
from local_settings import OPENAI_KEY

client = OpenAI(api_key=OPENAI_KEY)
```

## Testing the chat function

Below, we define a function `llm_chat` that takes a message and returns the response from the LLM.

```{python}
def llm_chat(message):
    response = client.chat.completions.create(
        model="gpt-4o-mini", messages=[{"role": "user", "content": message}]
    )
    return response.choices[0].message.content
```

Test the function with a quick query:

```{python}
llm_chat("What is Python (the programming language) named after?")
```

## Demo: Classifying Epidemiology Papers


We'll import a dataset containing epidemiology papers parsed from medRxiv, with columns the `doi` (digital object identifier), `title`, and `abstract`.

```{python}
papers = pd.read_csv("https://raw.githubusercontent.com/the-graph-courses/pbb_2025_q1_materials/refs/heads/main/week_07_workshop/data/medrxiv_epi_papers_2023_jan.csv")
papers.head()
```

### Classifying Disease Focus

We want to categorize each paper as concerning **non-communicable diseases (NCD)**, **communicable diseases (CD)**, **both**, **neither**, or **not applicable**. To do this, we will create a function that takes the paper’s abstract, sends it to the LLM, and returns exactly one of those five categories.

```{python}
def classify_disease_focus(abstract):
    prompt = f"""
    We have an epidemiology research paper. The abstract is below. 
    Classify the paper's disease focus as:
    - "noncommunicable" (for diseases like cancer, diabetes, cardiovascular diseases, etc.)
    - "communicable" (for infectious diseases caused by pathogens)
    - "both" (if the study covers both communicable and non-communicable diseases)
    - "neither" (if the abstract does not mention or focus on these disease categories)
    - "na"

    Return ONLY one of the above categories, nothing else.
    
    Abstract:
    {abstract}
    """
    return llm_chat(prompt)


# Vectorize the function so we can apply it to an entire column
classify_disease_focus_vec = np.vectorize(classify_disease_focus)

# Create a new column in the papers DataFrame
papers["disease_focus"] = classify_disease_focus_vec(papers["abstract"])
```

Now check the distribution of results:

```{python}
papers["disease_focus"].value_counts()
```

This gives you a quick look at how many abstracts the model classified into each disease focus category. Sometimes, the output may require some cleaning. Let's do this by removing whitespace at the start and end of the string, remove non-alphabetic characters, and converting to lowercase.

```{python}
papers["disease_focus"] = papers["disease_focus"].str.strip().str.replace(r'[^a-zA-Z]', '', regex=True).str.lower()
papers["disease_focus"].value_counts()
```

Now let's write this to a CSV file, where it will be easier to check whether the results make sense.

```{python}
papers.to_csv("data/epi_papers_disease_focus.csv", index=False)
```

# Your Turn: Using LLMs to Analyze Job Postings

Now that you’ve seen a mini-introduction to classification with epidemiology papers, let’s move on to the main dataset for this workshop: **job postings** scraped from Glassdoor. 

Download it from the website and place it in an appropriate location in your folder. 

Load the data into a pandas dataframe:

```{python}

jobs = pd.read_csv("glassdoor_jobs_sample.csv")
print(jobs.head())

```

# Task 1: Extracting Years of Experience Required

## Part A: Create and Apply LLM Function

We will use the LLM to extract the minimum years of experience required from job descriptions.

We have written the prompt for you. Vectorize the function, then apply it on the `job_description` column of the dataframe. Create a column called `years_required` in the dataframe to store the results.

```{python}
def yrs_exp(description):
    prompt = f"""
    Extract the minimum years of experience required from this job description. 
    Return ONLY a number. If a range is given, return the lower number.
    If no years of experience are explicitly mentioned, return 'NA'.
    Here's the job description:
    {description}
    """
    return llm_chat(prompt)

# Vectorize the function
yrs_exp_vec = np.vectorize(yrs_exp)

# Apply the function to the dataset
jobs["years_required"] = yrs_exp_vec(jobs["job_description"])

# Write the updated DataFrame to a CSV file for further review
jobs.to_csv("data/job_postings_with_experience.csv", index=False)

# Display a few rows to compare the original job descriptions and the extracted years
print(jobs[["job_description", "years_required"]].head())

```

Write the data to a CSV file and check if the results make sense by comparing them to the original job descriptions.

## Part B: Convert to Numeric

The `years_required` column is currently a string. Convert it to a numeric type using the `pd.to_numeric` function, with the `errors='coerce'` argument so that any non-numeric values are converted to `NaN`.

```{python}
jobs["years_required"] = pd.to_numeric(jobs["years_required"], errors='coerce')

```

## Part C: Create Visualization

Create a visualization comparing years of experience required to the midpoint salary estimate. You'll need to:

- Create a scatter plot using Plotly Express.
- Use the `midpoint_salary_estimate` column for salary and `years_required` for the x-axis.

```{python}


fig = px.scatter(
    jobs,
    x="years_required",
    y="midpoint_salary_estimate",
    title="Years of Experience vs Midpoint Salary Estimate",
    labels={
        "years_required": "Years Required",
        "midpoint_salary_estimate": "Midpoint Salary Estimate ($)"
    }
)
fig.show()


```

Describe any relationships you see in the plot.

The scatter plot demonstrates a general upward trend: positions requiring more years of experience typically offer higher median salary estimates. Nonetheless, considerable variability exists—salaries can vary significantly even among roles with comparable experience requirements—and a few outliers imply that additional factors, such as industry or location, also impact salary levels

# Task 2: Extracting Programming Language Requirements

In this task, we will ask the LLM to extract the programming languages mentioned in the job descriptions, either R, Python, both, or neither. Trying to do this using traditional regex methods would be difficult, because the string " R " is used in many different context in job descriptions, e.g. "R & D" or "HR", not always referring to the programming language R. But LLMs can (mostly) understand the context and extract the correct answer.

## Part A: Create and Apply LLM Function

Now, create a function that asks the model about the programming languages mentioned in the job description. Specifically, it should return one of four categories regarding the languages mentioned: "R", "Python", "both", or "neither". This time, you'll need to craft the prompt yourself.

Apply your function to the dataset and create a new column `lang_req` in the dataframe to store the results.

```{python}
# Define the function here
def extract_languages(description):
    prompt = f"""
    Analyze the following job description and determine which programming language(s) are mentioned in the context of technical requirements.
    Please return exactly one of the following categories without any additional text:
      - "R" if only R is mentioned,
      - "Python" if only Python is mentioned,
      - "both" if both are mentioned,
      - "neither" if neither is mentioned.
    
    Job Description:
    {description}
    """
    return llm_chat(prompt)

# Vectorize the function
extract_languages_vec = np.vectorize(extract_languages)

# Apply the function to the dataset
jobs["lang_req"] = extract_languages_vec(jobs["job_description"])

# Display the updated DataFrame
print(jobs.head())
```

## Part B: Create Visualization

First, count the number of jobs that require each of the four categories:

```{python}
# Count the number of jobs for each category in the 'lang_req' column
lang_counts = jobs["lang_req"].value_counts()
print(lang_counts)

```

Create a box plot comparing salary distributions across the different programming language requirement categories:

```{python}
# Your code here: Create box plot using plotly express

fig = px.box(
    jobs,
    x="lang_req",
    y="midpoint_salary_estimate",
    title="Salary Distributions by Programming Language Requirement",
    labels={
        "lang_req": "Programming Language Requirement",
        "midpoint_salary_estimate": "Midpoint Salary Estimate ($)"
    }
)
fig.show()

```

Write a few sentences describing any patterns you see in the plot. (Note that this is a very small sample of jobs, so don't read too much into the results.)

The box plot reveals that job postings seeking proficiency in both R and Python generally offer higher median salary estimates than those requiring only one of these languages or neither

# Optional Challenge: Most common technical skills overall 

Use an LLM function to extract the most common technical skills mentioned in job descriptions, then create a visualization to illuminate the most common technical skills.

You will need to design your own approach to extract and standardize technical skills, being explicit in your prompt about what constitutes a technical skill. 

There's no single correct way to classify and standardize skills - document your choices and reasoning as you develop your solution.


```{python}


# Define the function to extract technical skills
def extract_tech_skills(description):
    prompt = f"""
    Analyze the following job description and extract all the technical skills mentioned.
    For this task, 'technical skills' include:
      - Programming languages (e.g., Python, R, Java, C++)
      - Software tools (e.g., Git, Docker, AWS)
      - Frameworks and libraries (e.g., React, TensorFlow, Pandas)
      - Other explicitly stated technical competencies (e.g., SQL, Machine Learning)
    Do not include soft skills (like communication or teamwork).
    Return a comma-separated list of standardized skill names. If no technical skills are found, return an empty string.
    
    Job Description:
    {description}
    """
    return llm_chat(prompt)

# Vectorize the function so we can apply it elementwise
extract_tech_skills_vec = np.vectorize(extract_tech_skills)

# Apply the vectorized function to create a new column 'tech_skills'
jobs["tech_skills"] = extract_tech_skills_vec(jobs["job_description"])

# Standardize and aggregate the technical skills across all job descriptions.
all_skills = []
for skills in jobs["tech_skills"]:
    if skills:  # if non-empty
        # Split the comma-separated skills and standardize them
        for skill in skills.split(","):
            cleaned_skill = skill.strip().lower()  # convert to lowercase for consistency
            if cleaned_skill:
                all_skills.append(cleaned_skill)

# Count the frequency of each skill
skill_counts = Counter(all_skills)
top_skills = skill_counts.most_common(10)  # Get the top 10 most common skills

# Create a DataFrame for visualization
top_skills_df = pd.DataFrame(top_skills, columns=["skill", "count"])

# Create a bar chart using Plotly Express
fig = px.bar(
    top_skills_df,
    x="skill",
    y="count",
    title="Top 10 Most Common Technical Skills in Job Descriptions",
    labels={"skill": "Technical Skill", "count": "Frequency"}
)
fig.show()

```