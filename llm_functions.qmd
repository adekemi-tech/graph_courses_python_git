
# Imports

```{python}
from openai import OpenAI
import pandas as pd
import numpy as np
from vega_datasets import data as vd
from local_settings import OPENAI_KEY
```

# Setting up the OpenAI Client

```{python}
client = OpenAI(api_key=OPENAI_KEY)
```

# Making our first call
```{python}
response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user",
    "content": "What is the most tourist_friendly city in France?"}]
)
```


```{python}
response.choices[0].message.content
```

# Defining a Helper Function

```{python}
def llm_chat(message):
    response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user",
    "content": message}])
    return response.choices[0].message.content

```

```{python}
llm_chat("Tell me why Python is an awesome language")
```

## Practice Q: Get tourist_friendly city in Brazil

Use the 'llm_chat' function to ask the model for the most tourist-friendly city in Brazil. Store the response in a variable called rec_brazil. Print the response.

```{python}
rec_brazil = llm_chat("What is the most tourist_friendly city in Brazil")
rec_brazil
```

## Variable as Prompt Inputs

```{python}
def city_rec(country):
    prompt = f"what is the most tourist_friendly city in {country}?"
    return llm_chat(prompt)
city_rec_vec = np.vectorize(city_rec)
```

```{python}
city_rec("Nigeria")
```

```{python}
city_rec("USA")
```

```{python}
city_rec_vec(["Nigeria", "Chile"])
```

```{python}
country_df = pd.DataFrame({"country": ["Nigeria", "Chile", "France", "Canada"]})
country_df
```


```{python}
# Using the vectorized function on a dataframe

country_df["city_rec"] = city_rec_vec(country_df["country"])
country_df.to_csv()
```

## Practice Q: Get local dishes

Create a function called get_local_dishes that takes a country name as input and returns some of the most famous local dishes from that country. Then, vectorize this function and apply it to the country_df DataFrame to add a column with local dish recommendations for each country.

```{python}
def get_local_dishes(country):
    prompt = f"What are the famous local dishes in the {country}?"
    return llm_chat(prompt)

# Vectorize the function
get_local_dishes_vec = np.vectorize(get_local_dishes)

# Apply the vectorized function to the 'country' column and assign to a new column
country_df["get_local_dishes"] = get_local_dishes_vec(country_df["country"])

# Display the DataFrame
print(country_df)

```

## Automated Summary: Movies Dataset

```{python}
import vega_datasets as vd

# Load the movies dataset
movies = vd.data.movies().head()
movies

```

```{python}
# Convert each movie's data into a dictionary
movies.to_dict(orient="records")
```

```{python}
# Let’s store this new column in the DataFrame
movies["full_dict"] = movies.to_dict(orient="records")
movies
```


```{python}
def movie_performance(movie_data):
    prompt = f"Considering the following data on this movie {movie_data}, provide a one-paragraph summary of its performance for my report."
    return llm_chat(prompt)
```

```{python}
# Example usage
movie_performance("Name: Kene's Movie, Sales: 100,000 USD")
```

```{python}
# Generate summaries for each movie
movies["llm_summary"] = movie_performance_vec(movies["full_dict"])
movies.to_csv("outputs/movies_output.csv")
```

```{python}
# Generate summaries for each movie
movies["llm_summary"] = movie_performance_vec(movies["full_dict"])
```


```{python}
# Save the results to a CSV file
movies.to_csv("movies_output.csv", index=False)
```

## Practice Q: Weather Summary

Using the first 5 rows of the seattle_weather dataset from vega_datasets, create a function that takes all weather columns for a particular day and generates a summary of the weather conditions for that day. The function should use the LLM to generate a one-paragraph summary for a report, considering the data provided. Store the function in a column called weather_summary.

```{python}
weather = vd.data.seattle_weather().head()
weather
```

```{python}
def movie_performance(movie_data):
    prompt = f"Considering the following data on this movie {movie_data}, provide a one-paragraph summary of its performance for my report."
    return llm_chat(prompt)
```


```{python}

import pandas as pd
import numpy as np

# Load the first 5 rows of the seattle_weather dataset
weather_df = vd.seattle_weather().head(5)

# Define the function to generate a weather summary using the LLM
def generate_weather_summary(row):
    prompt = (
        f"Generate a one-paragraph weather report summary based on the following data:\n"
        f"Date: {row['date']}\n"
        f"Precipitation: {row['precipitation']} inches\n"
        f"Max Temperature: {row['temp_max']} °F\n"
        f"Min Temperature: {row['temp_min']} °F\n"
        f"Wind: {row['wind']} mph\n"
        "Please provide a concise and informative summary."
    )
    return llm_chat(prompt)

# Apply the function to each row (axis=1) to create the new 'weather_summary' column
weather_df['weather_summary'] = weather_df.apply(generate_weather_summary, axis=1)

# Display the updated DataFrame
print(weather_df)

```